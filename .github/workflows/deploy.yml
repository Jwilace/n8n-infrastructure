name: N8N Infrastructure Deployment

on:
  push:
    branches: 
      - main
      - develop
  pull_request:
    branches: 
      - main
      - develop

permissions:
  contents: read
  id-token: write  # Required for OIDC authentication

jobs:
  terraform-validation:
    name: 'Terraform Validation'
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GithubActionsDeployRole
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive

    - name: Terraform Initialize
      run: terraform init
      env:
        TF_VAR_client_id: ${{ secrets.CLIENT_ID }}
        TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
        TF_VAR_environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'staging' }}
        TF_VAR_github_actions_role_arn: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GithubActionsDeployRole

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: |
        terraform plan \
          -var="client_id=${{ secrets.CLIENT_ID }}" \
          -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" \
          -var="environment=${{ github.ref == 'refs/heads/main' && 'prod' || 'staging' }}" \
          -var="github_actions_role_arn=arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GithubActionsDeployRole" \
          -out=tfplan

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan
        path: tfplan

  terraform-deployment:
    name: 'Terraform Deployment'
    needs: terraform-validation
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GithubActionsDeployRole
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: terraform-plan

    - name: Terraform Apply
      run: |
        terraform apply -auto-approve tfplan

    - name: Notify Deployment
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: Deployment of N8N infrastructure completed successfully
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        GITHUB_ACTION: ${{ github.action }}
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        GITHUB_REF: ${{ github.ref }}
        GITHUB_SHA: ${{ github.sha }}

  security-scan:
    name: 'Infrastructure Security Scan'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Run Checkov
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform
        skip_check: CKV_AWS_49,CKV_AWS_116

    - name: Upload SARIF file
      if: success()
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: results.sarif
